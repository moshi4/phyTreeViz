{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"phyTreeViz","text":""},{"location":"#overview","title":"Overview","text":"<p>phyTreeViz is a simple and minimal phylogenetic tree visualization python package implemented based on matplotlib. This package was developed to enhance phylogenetic tree visualization functionality of BioPython.</p> <p>phyTreeViz is intended to provide a simple and easy-to-use phylogenetic tree visualization function without complexity. Therefore, if you need complex tree annotations, I recommend using ete or ggtree.</p>"},{"location":"#installation","title":"Installation","text":"<p><code>Python 3.8 or later</code> is required for installation.</p> <p>Install PyPI package:</p> <pre><code>pip install phytreeviz\n</code></pre> <p>Install conda-forge package:</p> <pre><code>conda install -c conda-forge phytreeviz\n</code></pre>"},{"location":"#examples","title":"Examples","text":""},{"location":"getting_started/","title":"Getting Started","text":"In\u00a0[1]: Copied! <pre># %pip install phytreeviz\n</pre> # %pip install phytreeviz  In\u00a0[2]: Copied! <pre>from phytreeviz import TreeViz, load_example_tree_file\n\ntree_file = load_example_tree_file(\"small_example.nwk\")\n\ntv = TreeViz(tree_file)\ntv.show_branch_length(color=\"red\")\ntv.show_confidence(color=\"blue\")\ntv.show_scale_bar()\n\nfig = tv.plotfig()\n</pre> from phytreeviz import TreeViz, load_example_tree_file  tree_file = load_example_tree_file(\"small_example.nwk\")  tv = TreeViz(tree_file) tv.show_branch_length(color=\"red\") tv.show_confidence(color=\"blue\") tv.show_scale_bar()  fig = tv.plotfig() In\u00a0[3]: Copied! <pre>from phytreeviz import TreeViz, load_example_tree_file\n\ntree_file = load_example_tree_file(\"small_example.nwk\")\n\ntv = TreeViz(tree_file, height=0.7)\ntv.show_scale_axis()\n\ntv.set_node_label_props(\"Homo_sapiens\", color=\"grey\")\ntv.set_node_label_props(\"Pongo_abelii\", color=\"green\", style=\"italic\")\n\ntv.set_node_line_props([\"Hylobates_moloch\", \"Nomascus_leucogenys\"], color=\"orange\", lw=2)\ntv.set_node_line_props([\"Homo_sapiens\", \"Pan_troglodytes\", \"Pan_paniscus\"], color=\"magenta\", ls=\"dotted\")\n\nfig = tv.plotfig()\n</pre> from phytreeviz import TreeViz, load_example_tree_file  tree_file = load_example_tree_file(\"small_example.nwk\")  tv = TreeViz(tree_file, height=0.7) tv.show_scale_axis()  tv.set_node_label_props(\"Homo_sapiens\", color=\"grey\") tv.set_node_label_props(\"Pongo_abelii\", color=\"green\", style=\"italic\")  tv.set_node_line_props([\"Hylobates_moloch\", \"Nomascus_leucogenys\"], color=\"orange\", lw=2) tv.set_node_line_props([\"Homo_sapiens\", \"Pan_troglodytes\", \"Pan_paniscus\"], color=\"magenta\", ls=\"dotted\")  fig = tv.plotfig() In\u00a0[4]: Copied! <pre>from phytreeviz import TreeViz, load_example_tree_file\n\ntree_file = load_example_tree_file(\"small_example.nwk\")\n\ntv = TreeViz(tree_file, align_leaf_label=True)\ntv.show_scale_axis()\n\ngroup1 = [\"Hylobates_moloch\", \"Nomascus_leucogenys\"]\ngroup2 = [\"Homo_sapiens\", \"Pan_paniscus\"]\n\ntv.highlight(group1, \"orange\")\ntv.highlight(group2, \"lime\")\n\ntv.annotate(group1, \"group1\")\ntv.annotate(group2, \"group2\")\n\ntv.marker(group1, marker=\"s\", color=\"blue\")\ntv.marker(group2, marker=\"D\", color=\"purple\", descendent=True)\ntv.marker(\"Pongo_abelii\", color=\"red\")\n\nfig = tv.plotfig()\n</pre> from phytreeviz import TreeViz, load_example_tree_file  tree_file = load_example_tree_file(\"small_example.nwk\")  tv = TreeViz(tree_file, align_leaf_label=True) tv.show_scale_axis()  group1 = [\"Hylobates_moloch\", \"Nomascus_leucogenys\"] group2 = [\"Homo_sapiens\", \"Pan_paniscus\"]  tv.highlight(group1, \"orange\") tv.highlight(group2, \"lime\")  tv.annotate(group1, \"group1\") tv.annotate(group2, \"group2\")  tv.marker(group1, marker=\"s\", color=\"blue\") tv.marker(group2, marker=\"D\", color=\"purple\", descendent=True) tv.marker(\"Pongo_abelii\", color=\"red\")  fig = tv.plotfig() In\u00a0[5]: Copied! <pre>from phytreeviz import TreeViz, load_example_tree_file\nfrom matplotlib.patches import Patch\n\ntree_file = load_example_tree_file(\"medium_example.nwk\")\n\ntv = TreeViz(tree_file, height=0.3, align_leaf_label=True, leaf_label_size=10)\ntv.show_scale_bar()\n\ngroup1 = [\"Hylobates_moloch\", \"Nomascus_leucogenys\"]\ngroup2 = [\"Homo_sapiens\", \"Pongo_abelii\"]\ngroup3 = [\"Piliocolobus_tephrosceles\", \"Rhinopithecus_bieti\"]\ngroup4 = [\"Chlorocebus_sabaeus\", \"Papio_anubis\"]\n\ntv.highlight(group1, \"orange\", area=\"full\")\ntv.highlight(group2, \"skyblue\", area=\"full\")\ntv.highlight(group3, \"lime\", area=\"full\")\ntv.highlight(group4, \"pink\", area=\"full\")\n\ntv.link(group3, group4, connectionstyle=\"arc3,rad=0.2\")\n\nfig = tv.plotfig()\n\n_ = fig.legend(\n    handles=[\n        Patch(label=\"group1\", color=\"orange\"),\n        Patch(label=\"group2\", color=\"skyblue\"),\n        Patch(label=\"group3\", color=\"lime\"),\n        Patch(label=\"group4\", color=\"pink\"),\n    ],\n    frameon=False,\n    bbox_to_anchor=(0.3, 0.3),\n    loc=\"center\",\n    ncols=2,\n)\n\n# fig.savefig(\"result.png\", dpi=300)\n</pre> from phytreeviz import TreeViz, load_example_tree_file from matplotlib.patches import Patch  tree_file = load_example_tree_file(\"medium_example.nwk\")  tv = TreeViz(tree_file, height=0.3, align_leaf_label=True, leaf_label_size=10) tv.show_scale_bar()  group1 = [\"Hylobates_moloch\", \"Nomascus_leucogenys\"] group2 = [\"Homo_sapiens\", \"Pongo_abelii\"] group3 = [\"Piliocolobus_tephrosceles\", \"Rhinopithecus_bieti\"] group4 = [\"Chlorocebus_sabaeus\", \"Papio_anubis\"]  tv.highlight(group1, \"orange\", area=\"full\") tv.highlight(group2, \"skyblue\", area=\"full\") tv.highlight(group3, \"lime\", area=\"full\") tv.highlight(group4, \"pink\", area=\"full\")  tv.link(group3, group4, connectionstyle=\"arc3,rad=0.2\")  fig = tv.plotfig()  _ = fig.legend(     handles=[         Patch(label=\"group1\", color=\"orange\"),         Patch(label=\"group2\", color=\"skyblue\"),         Patch(label=\"group3\", color=\"lime\"),         Patch(label=\"group4\", color=\"pink\"),     ],     frameon=False,     bbox_to_anchor=(0.3, 0.3),     loc=\"center\",     ncols=2, )  # fig.savefig(\"result.png\", dpi=300)"},{"location":"getting_started/#example1","title":"Example1\u00b6","text":"<p>Show <code>branch length</code>, <code>confidence value</code>, <code>scale bar</code></p>"},{"location":"getting_started/#example2","title":"Example2\u00b6","text":"<ul> <li>Set plot properties of <code>label text</code> and <code>branch line</code></li> <li>Show <code>scale axis</code></li> </ul>"},{"location":"getting_started/#example3","title":"Example3\u00b6","text":"<ul> <li>Align leaf label position to rightmost</li> <li>Plot <code>highlight</code> and <code>annotation</code> for groups</li> <li>Plot <code>marker</code> for target taxa</li> </ul>"},{"location":"getting_started/#example4","title":"Example4\u00b6","text":"<ul> <li>Plot <code>highlight</code> and <code>legend</code> for groups</li> <li>Plot <code>link</code> between target clades</li> </ul>"},{"location":"plot_api_example/","title":"Plot API Example","text":"In\u00a0[1]: Copied! <pre># %pip install phytreeviz\n</pre> # %pip install phytreeviz In\u00a0[2]: Copied! <pre>from phytreeviz import TreeViz, load_example_tree_file\n\ntree_file = load_example_tree_file(\"small_example.nwk\")\ntv = TreeViz(tree_file)\ntv.show_branch_length(label_formatter=lambda v: f\"{v:.4f}\")\n\nfig = tv.plotfig()\n</pre> from phytreeviz import TreeViz, load_example_tree_file  tree_file = load_example_tree_file(\"small_example.nwk\") tv = TreeViz(tree_file) tv.show_branch_length(label_formatter=lambda v: f\"{v:.4f}\")  fig = tv.plotfig() In\u00a0[3]: Copied! <pre>from phytreeviz import TreeViz, load_example_tree_file\n\ntree_file = load_example_tree_file(\"small_example.nwk\")\ntv = TreeViz(tree_file)\ntv.show_confidence(ypos=\"top\", label_formatter=lambda v: f\"{v:.2f}\")\n\nfig = tv.plotfig()\n</pre> from phytreeviz import TreeViz, load_example_tree_file  tree_file = load_example_tree_file(\"small_example.nwk\") tv = TreeViz(tree_file) tv.show_confidence(ypos=\"top\", label_formatter=lambda v: f\"{v:.2f}\")  fig = tv.plotfig() In\u00a0[4]: Copied! <pre>from phytreeviz import TreeViz, load_example_tree_file\n\ntree_file = load_example_tree_file(\"small_example.nwk\")\ntv = TreeViz(tree_file, align_leaf_label=True)\ntv.show_scale_axis(ticks_interval=0.1)\n\nfig = tv.plotfig()\n</pre> from phytreeviz import TreeViz, load_example_tree_file  tree_file = load_example_tree_file(\"small_example.nwk\") tv = TreeViz(tree_file, align_leaf_label=True) tv.show_scale_axis(ticks_interval=0.1)  fig = tv.plotfig() In\u00a0[5]: Copied! <pre>from phytreeviz import TreeViz, load_example_tree_file\n\ntree_file = load_example_tree_file(\"small_example.nwk\")\ntv = TreeViz(tree_file)\ntv.show_scale_bar()\ntv.show_scale_bar(scale_size=0.1, loc=\"upper left\", label_top=True)\n\nfig = tv.plotfig()\n</pre> from phytreeviz import TreeViz, load_example_tree_file  tree_file = load_example_tree_file(\"small_example.nwk\") tv = TreeViz(tree_file) tv.show_scale_bar() tv.show_scale_bar(scale_size=0.1, loc=\"upper left\", label_top=True)  fig = tv.plotfig() In\u00a0[6]: Copied! <pre>from phytreeviz import TreeViz, load_example_tree_file\n\ntree_file = load_example_tree_file(\"small_example.nwk\")\ntv = TreeViz(tree_file, align_leaf_label=True)\n\ntv.highlight([\"Hylobates_moloch\", \"Nomascus_leucogenys\"], \"orange\", area=\"branch\")\ntv.highlight(\"Pongo_abelii\", \"pink\", area=\"branch-label\")\ntv.highlight([\"Homo_sapiens\", \"Pan_paniscus\"], \"lime\", area=\"full\")\n\nfig = tv.plotfig()\n</pre> from phytreeviz import TreeViz, load_example_tree_file  tree_file = load_example_tree_file(\"small_example.nwk\") tv = TreeViz(tree_file, align_leaf_label=True)  tv.highlight([\"Hylobates_moloch\", \"Nomascus_leucogenys\"], \"orange\", area=\"branch\") tv.highlight(\"Pongo_abelii\", \"pink\", area=\"branch-label\") tv.highlight([\"Homo_sapiens\", \"Pan_paniscus\"], \"lime\", area=\"full\")  fig = tv.plotfig() In\u00a0[7]: Copied! <pre>from phytreeviz import TreeViz, load_example_tree_file\n\ntree_file = load_example_tree_file(\"small_example.nwk\")\ntv = TreeViz(tree_file)\n\ntv.annotate([\"Hylobates_moloch\", \"Nomascus_leucogenys\"], \"group1\", line_color=\"orange\")\ntv.annotate(\"Pongo_abelii\", \"group2\", align=True, line_color=\"red\")\ntv.annotate(\"Gorilla_gorilla_gorilla\", \"group3\", align=True, line_color=\"blue\")\ntv.annotate([\"Homo_sapiens\", \"Pan_paniscus\"], \"group4\", line_color=\"lime\", text_orientation=\"vertical\")\n\nfig = tv.plotfig()\n</pre> from phytreeviz import TreeViz, load_example_tree_file  tree_file = load_example_tree_file(\"small_example.nwk\") tv = TreeViz(tree_file)  tv.annotate([\"Hylobates_moloch\", \"Nomascus_leucogenys\"], \"group1\", line_color=\"orange\") tv.annotate(\"Pongo_abelii\", \"group2\", align=True, line_color=\"red\") tv.annotate(\"Gorilla_gorilla_gorilla\", \"group3\", align=True, line_color=\"blue\") tv.annotate([\"Homo_sapiens\", \"Pan_paniscus\"], \"group4\", line_color=\"lime\", text_orientation=\"vertical\")  fig = tv.plotfig() In\u00a0[8]: Copied! <pre>from phytreeviz import TreeViz, load_example_tree_file\n\ntree_file = load_example_tree_file(\"small_example.nwk\")\ntv = TreeViz(tree_file, align_leaf_label=True, leaf_label_xmargin_ratio=0.02)\n\ntv.marker([\"Hylobates_moloch\", \"Nomascus_leucogenys\"], color=\"blue\")\ntv.marker(\"Pongo_abelii\", marker=\"s\", color=\"red\")\ntv.marker([\"Homo_sapiens\", \"Pan_paniscus\"], marker=\"D\", descendent=True, fc=\"lime\", ec=\"black\", lw=0.5)\n\nfig = tv.plotfig()\n</pre> from phytreeviz import TreeViz, load_example_tree_file  tree_file = load_example_tree_file(\"small_example.nwk\") tv = TreeViz(tree_file, align_leaf_label=True, leaf_label_xmargin_ratio=0.02)  tv.marker([\"Hylobates_moloch\", \"Nomascus_leucogenys\"], color=\"blue\") tv.marker(\"Pongo_abelii\", marker=\"s\", color=\"red\") tv.marker([\"Homo_sapiens\", \"Pan_paniscus\"], marker=\"D\", descendent=True, fc=\"lime\", ec=\"black\", lw=0.5)  fig = tv.plotfig() In\u00a0[9]: Copied! <pre>from phytreeviz import TreeViz, load_example_tree_file\n\ntree_file = load_example_tree_file(\"small_example.nwk\")\ntv = TreeViz(tree_file, align_leaf_label=True)\n\ntv.link(\"Pongo_abelii\", [\"Hylobates_moloch\", \"Nomascus_leucogenys\"])\ntv.link(\n    \"Homo_sapiens\",\n    [\"Pan_troglodytes\", \"Pan_paniscus\"],\n    color=\"blue\",\n    arrowstyle=\"&lt;|-|&gt;\",\n    connectionstyle=\"arc3,rad=0.2\",\n)\n\nfig = tv.plotfig()\n</pre> from phytreeviz import TreeViz, load_example_tree_file  tree_file = load_example_tree_file(\"small_example.nwk\") tv = TreeViz(tree_file, align_leaf_label=True)  tv.link(\"Pongo_abelii\", [\"Hylobates_moloch\", \"Nomascus_leucogenys\"]) tv.link(     \"Homo_sapiens\",     [\"Pan_troglodytes\", \"Pan_paniscus\"],     color=\"blue\",     arrowstyle=\"&lt;|-|&gt;\",     connectionstyle=\"arc3,rad=0.2\", )  fig = tv.plotfig() In\u00a0[10]: Copied! <pre>from phytreeviz import TreeViz, load_example_tree_file\n\ntree_file = load_example_tree_file(\"small_example.nwk\")\ntv = TreeViz(tree_file, align_leaf_label=True)\n\ntv.text_on_branch([\"Hylobates_moloch\", \"Nomascus_leucogenys\"], text=\"Node01\")\ntv.text_on_branch(\"Pongo_abelii\", text=\"Node02\", xpos=\"left\", ypos=\"bottom\", color=\"red\")\ntv.text_on_branch(\n    [\"Pan_troglodytes\", \"Pan_paniscus\"],\n    text=\"Node03\",\n    xpos=\"center\",\n    ypos=\"center\",\n    bbox=dict(boxstyle=\"square,pad=0.3\", fc=\"skyblue\")\n)\n\nfig = tv.plotfig()\n</pre> from phytreeviz import TreeViz, load_example_tree_file  tree_file = load_example_tree_file(\"small_example.nwk\") tv = TreeViz(tree_file, align_leaf_label=True)  tv.text_on_branch([\"Hylobates_moloch\", \"Nomascus_leucogenys\"], text=\"Node01\") tv.text_on_branch(\"Pongo_abelii\", text=\"Node02\", xpos=\"left\", ypos=\"bottom\", color=\"red\") tv.text_on_branch(     [\"Pan_troglodytes\", \"Pan_paniscus\"],     text=\"Node03\",     xpos=\"center\",     ypos=\"center\",     bbox=dict(boxstyle=\"square,pad=0.3\", fc=\"skyblue\") )  fig = tv.plotfig() In\u00a0[11]: Copied! <pre>from phytreeviz import TreeViz, load_example_tree_file\n\ntree_file = load_example_tree_file(\"small_example.nwk\")\ntv = TreeViz(tree_file, align_leaf_label=True)\n\ntv.marker([\"Hylobates_moloch\", \"Nomascus_leucogenys\"], fc=\"lime\", ec=\"black\", lw=0.5, size=10)\ntv.text_on_node([\"Hylobates_moloch\", \"Nomascus_leucogenys\"], \"1\")\ntv.text_on_node(\n    [\"Pan_troglodytes\", \"Pan_paniscus\"],\n    text=\"Node\",\n    bbox=dict(boxstyle=\"square,pad=0.3\", fc=\"skyblue\")\n)\n\nfig = tv.plotfig()\n</pre> from phytreeviz import TreeViz, load_example_tree_file  tree_file = load_example_tree_file(\"small_example.nwk\") tv = TreeViz(tree_file, align_leaf_label=True)  tv.marker([\"Hylobates_moloch\", \"Nomascus_leucogenys\"], fc=\"lime\", ec=\"black\", lw=0.5, size=10) tv.text_on_node([\"Hylobates_moloch\", \"Nomascus_leucogenys\"], \"1\") tv.text_on_node(     [\"Pan_troglodytes\", \"Pan_paniscus\"],     text=\"Node\",     bbox=dict(boxstyle=\"square,pad=0.3\", fc=\"skyblue\") )  fig = tv.plotfig()  In\u00a0[12]: Copied! <pre>from phytreeviz import TreeViz, load_example_tree_file\n\ntree_file = load_example_tree_file(\"small_example.nwk\")\ntv = TreeViz(tree_file, align_leaf_label=True)\n\ntv.set_node_label_props(\"Hylobates_moloch\", color=\"blue\")\ntv.set_node_label_props(\"Pongo_abelii\", color=\"red\", style=\"italic\")\ntv.set_node_label_props(\"Homo_sapiens\", size=8, backgroundcolor=\"lime\")\n\nfig = tv.plotfig()\n</pre> from phytreeviz import TreeViz, load_example_tree_file  tree_file = load_example_tree_file(\"small_example.nwk\") tv = TreeViz(tree_file, align_leaf_label=True)  tv.set_node_label_props(\"Hylobates_moloch\", color=\"blue\") tv.set_node_label_props(\"Pongo_abelii\", color=\"red\", style=\"italic\") tv.set_node_label_props(\"Homo_sapiens\", size=8, backgroundcolor=\"lime\")  fig = tv.plotfig() In\u00a0[13]: Copied! <pre>from phytreeviz import TreeViz, load_example_tree_file\n\ntree_file = load_example_tree_file(\"small_example.nwk\")\ntv = TreeViz(tree_file)\n\ntv.set_node_line_props([\"Hylobates_moloch\", \"Nomascus_leucogenys\"], color=\"orange\", lw=2)\ntv.set_node_line_props([\"Homo_sapiens\", \"Pan_paniscus\"], color=\"magenta\", ls=\"dotted\")\n\nfig = tv.plotfig()\n</pre> from phytreeviz import TreeViz, load_example_tree_file  tree_file = load_example_tree_file(\"small_example.nwk\") tv = TreeViz(tree_file)  tv.set_node_line_props([\"Hylobates_moloch\", \"Nomascus_leucogenys\"], color=\"orange\", lw=2) tv.set_node_line_props([\"Homo_sapiens\", \"Pan_paniscus\"], color=\"magenta\", ls=\"dotted\")  fig = tv.plotfig()"},{"location":"plot_api_example/#show_branch_length","title":"show_branch_length\u00b6","text":""},{"location":"plot_api_example/#show_confidence","title":"show_confidence\u00b6","text":""},{"location":"plot_api_example/#show_scale_axis","title":"show_scale_axis\u00b6","text":""},{"location":"plot_api_example/#show_scale_bar","title":"show_scale_bar\u00b6","text":""},{"location":"plot_api_example/#highlight","title":"highlight\u00b6","text":""},{"location":"plot_api_example/#annotate","title":"annotate\u00b6","text":""},{"location":"plot_api_example/#marker","title":"marker\u00b6","text":""},{"location":"plot_api_example/#link","title":"link\u00b6","text":""},{"location":"plot_api_example/#text_on_branch","title":"text_on_branch\u00b6","text":""},{"location":"plot_api_example/#text_on_node","title":"text_on_node\u00b6","text":""},{"location":"plot_api_example/#set_node_label_props","title":"set_node_label_props\u00b6","text":""},{"location":"plot_api_example/#set_node_line_props","title":"set_node_line_props\u00b6","text":""},{"location":"api-docs/treeviz/","title":"TreeViz Class","text":""},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz","title":"TreeViz","text":"<pre><code>TreeViz(\n    tree_data: str | Path | Tree,\n    *,\n    format: str = \"newick\",\n    height: float = 0.5,\n    width: float = 8,\n    orientation: str = \"right\",\n    align_leaf_label: bool = False,\n    ignore_branch_length: bool = False,\n    leaf_label_size: float = 12,\n    innode_label_size: float = 0,\n    show_auto_innode_label: bool = True,\n    leaf_label_xmargin_ratio: float = 0.01,\n    innode_label_xmargin_ratio: float = 0.01,\n    reverse: bool = False\n)\n</code></pre> <p>Phylogenetic Tree Visualization Class</p> PARAMETER  DESCRIPTION <code>tree_data</code> <p>Tree data (<code>File</code>|<code>File URL</code>|<code>Tree Object</code>|<code>Tree String</code>)</p> <p> TYPE: <code>str | Path | Tree</code> </p> <code>format</code> <p>Tree format (<code>newick</code>|<code>phyloxml</code>|<code>nexus</code>|<code>nexml</code>|<code>cdao</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'newick'</code> </p> <code>height</code> <p>Figure height per leaf node of tree</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>width</code> <p>Figure width</p> <p> TYPE: <code>float</code> DEFAULT: <code>8</code> </p> <code>orientation</code> <p>Tree orientation (<code>right</code>|<code>left</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'right'</code> </p> <code>align_leaf_label</code> <p>If True, align leaf label.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>ignore_branch_length</code> <p>If True, Ignore branch length for plotting tree.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>leaf_label_size</code> <p>Leaf label size</p> <p> TYPE: <code>float</code> DEFAULT: <code>12</code> </p> <code>innode_label_size</code> <p>Internal node label size</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>show_auto_innode_label</code> <p>If True, show auto defined internal node label (e.g. <code>N_1</code>, <code>N_2</code>, ..., <code>N_XX</code>)</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>leaf_label_xmargin_ratio</code> <p>Leaf label x margin ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.01</code> </p> <code>innode_label_xmargin_ratio</code> <p>Internal node label x margin ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.01</code> </p> <code>reverse</code> <p>Plot tree in reverse order</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.tree","title":"tree  <code>property</code>","text":"<pre><code>tree: Tree\n</code></pre> <p>BioPython's Tree Object</p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.figsize","title":"figsize  <code>property</code>","text":"<pre><code>figsize: tuple[float, float]\n</code></pre> <p>Figure size</p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.xlim","title":"xlim  <code>property</code>","text":"<pre><code>xlim: tuple[float, float]\n</code></pre> <p>Axes xlim</p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.ylim","title":"ylim  <code>property</code>","text":"<pre><code>ylim: tuple[float, float]\n</code></pre> <p>Axes ylim</p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.leaf_labels","title":"leaf_labels  <code>cached</code> <code>property</code>","text":"<pre><code>leaf_labels: list[str]\n</code></pre> <p>Leaf labels</p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.innode_labels","title":"innode_labels  <code>cached</code> <code>property</code>","text":"<pre><code>innode_labels: list[str]\n</code></pre> <p>Internal node labels</p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.all_node_labels","title":"all_node_labels  <code>cached</code> <code>property</code>","text":"<pre><code>all_node_labels: list[str]\n</code></pre> <p>All node labels</p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.max_tree_depth","title":"max_tree_depth  <code>cached</code> <code>property</code>","text":"<pre><code>max_tree_depth: float\n</code></pre> <p>Max tree depth (root -&gt; leaf max branch length)</p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.name2xy","title":"name2xy  <code>cached</code> <code>property</code>","text":"<pre><code>name2xy: dict[str, tuple[float, float]]\n</code></pre> <p>Tree node name &amp; node xy coordinate dict (alias for <code>name2xy_right</code>)</p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.name2xy_right","title":"name2xy_right  <code>cached</code> <code>property</code>","text":"<pre><code>name2xy_right: dict[str, tuple[float, float]]\n</code></pre> <p>Tree node name &amp; node right xy coordinate dict</p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.name2xy_center","title":"name2xy_center  <code>cached</code> <code>property</code>","text":"<pre><code>name2xy_center: dict[str, tuple[float, float]]\n</code></pre> <p>Tree node name &amp; node center xy coordinate dict</p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.name2xy_left","title":"name2xy_left  <code>cached</code> <code>property</code>","text":"<pre><code>name2xy_left: dict[str, tuple[float, float]]\n</code></pre> <p>Tree node name &amp; node left xy coordinate dict</p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.name2rect","title":"name2rect  <code>cached</code> <code>property</code>","text":"<pre><code>name2rect: dict[str, Rectangle]\n</code></pre> <p>Tree node name &amp; rectangle dict</p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.ax","title":"ax  <code>property</code>","text":"<pre><code>ax: Axes\n</code></pre> <p>Plot axes</p> <p>Can't access <code>ax</code> property before calling <code>tv.plotfig()</code> method</p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.show_branch_length","title":"show_branch_length","text":"<pre><code>show_branch_length(\n    *,\n    size: int = 8,\n    xpos: str = \"center\",\n    ypos: str = \"top\",\n    xmargin_ratio: float = 0.01,\n    ymargin_ratio: float = 0.05,\n    label_formatter: Callable[[float], str] | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Show branch length text label on each branch</p> PARAMETER  DESCRIPTION <code>size</code> <p>Text size</p> <p> TYPE: <code>int</code> DEFAULT: <code>8</code> </p> <code>xpos</code> <p>X position of plot text (<code>left</code>|<code>center</code>|<code>right</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'center'</code> </p> <code>ypos</code> <p>Y position of plot text (<code>top</code>|<code>center</code>|<code>bottom</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'top'</code> </p> <code>xmargin_ratio</code> <p>Text x margin ratio. If <code>xpos = center</code>, this param is ignored.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.01</code> </p> <code>ymargin_ratio</code> <p>Text y margin ratio. If <code>ypos = center</code>, this param is ignored.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.05</code> </p> <code>label_formatter</code> <p>User-defined branch length value label format function (e.g. <code>lambda v: f\"{v:.3f}\"</code>)</p> <p> TYPE: <code>Callable[[float], str] | None</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p>Text properties (e.g. <code>color=\"red\", bbox=dict(color=\"skyblue\"), ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.show_confidence","title":"show_confidence","text":"<pre><code>show_confidence(\n    *,\n    size: int = 8,\n    xpos: str = \"center\",\n    ypos: str = \"bottom\",\n    xmargin_ratio: float = 0.01,\n    ymargin_ratio: float = 0.05,\n    label_formatter: Callable[[float], str] | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Show confidence text label on each branch</p> PARAMETER  DESCRIPTION <code>size</code> <p>Text size</p> <p> TYPE: <code>int</code> DEFAULT: <code>8</code> </p> <code>xpos</code> <p>X position of plot text (<code>left</code>|<code>center</code>|<code>right</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'center'</code> </p> <code>ypos</code> <p>Y position of plot text (<code>top</code>|<code>center</code>|<code>bottom</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'bottom'</code> </p> <code>xmargin_ratio</code> <p>Text x margin ratio. If <code>xpos = center</code>, this param is ignored.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.01</code> </p> <code>ymargin_ratio</code> <p>Text y margin ratio. If <code>ypos = center</code>, this param is ignored.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.05</code> </p> <code>label_formatter</code> <p>User-defined confidence value label format function (e.g. <code>lambda v: f\"{v:.3f}\"</code>)</p> <p> TYPE: <code>Callable[[float], str] | None</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p>Text properties (e.g. <code>color=\"red\", bbox=dict(color=\"skyblue\"), ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.show_scale_axis","title":"show_scale_axis","text":"<pre><code>show_scale_axis(*, ticks_interval: float | None = None, ypos: float = 0) -&gt; None\n</code></pre> <p>Show scale axis</p> PARAMETER  DESCRIPTION <code>ticks_interval</code> <p>Ticks interval. If None, interval is automatically defined.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>ypos</code> <p>Y position of axis.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.show_scale_bar","title":"show_scale_bar","text":"<pre><code>show_scale_bar(\n    *,\n    scale_size: float | None = None,\n    text_size: float = 8,\n    loc: str = \"lower left\",\n    label_top: bool = False\n) -&gt; None\n</code></pre> <p>Show scale bar</p> PARAMETER  DESCRIPTION <code>scale_size</code> <p>Scale size. If None, size is automatically defined.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>text_size</code> <p>Text label size</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>8</code> </p> <code>loc</code> <p>Bar location (e.g. <code>lower left</code>, <code>upper left</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'lower left'</code> </p> <code>label_top</code> <p>If True, plot label on top. If False, plot label on bottom.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.highlight","title":"highlight","text":"<pre><code>highlight(\n    query: str | list[str] | tuple[str],\n    color: str,\n    *,\n    alpha: float = 0.5,\n    area: str = \"branch-label\",\n    **kwargs\n) -&gt; None\n</code></pre> <p>Plot highlight for target node</p> PARAMETER  DESCRIPTION <code>query</code> <p>Search query node name(s) for highlight. If multiple node names are set, MRCA(Most Recent Common Ancester) node is set.</p> <p> TYPE: <code>str | list[str] | tuple[str]</code> </p> <code>color</code> <p>Highlight color</p> <p> TYPE: <code>str</code> </p> <code>alpha</code> <p>Highlight color alpha(transparancy) value</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.5</code> </p> <code>area</code> <p>Highlight area (<code>branch</code>|<code>branch-label</code>|<code>full</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'branch-label'</code> </p> <code>**kwargs</code> <p>Rectangle properties (e.g. <code>alpha=0.5, ec=\"grey\", lw=1.0, ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Rectangle.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.annotate","title":"annotate","text":"<pre><code>annotate(\n    query: str | list[str] | tuple[str],\n    label: str,\n    *,\n    text_size: float = 10,\n    text_color: str = \"black\",\n    text_orientation: str = \"horizontal\",\n    line_color: str = \"black\",\n    xmargin_ratio: float = 0.01,\n    align: bool = False,\n    text_kws: dict[str, Any] | None = None,\n    line_kws: dict[str, Any] | None = None\n) -&gt; None\n</code></pre> <p>Annotate tree clade with line &amp; text label</p> PARAMETER  DESCRIPTION <code>query</code> <p>Search query node name(s) for annotate. If multiple node names are set, MRCA(Most Recent Common Ancester) node is set.</p> <p> TYPE: <code>str | list[str] | tuple[str]</code> </p> <code>label</code> <p>Label name</p> <p> TYPE: <code>str</code> </p> <code>text_size</code> <p>Text size</p> <p> TYPE: <code>float</code> DEFAULT: <code>10</code> </p> <code>text_color</code> <p>Text color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'black'</code> </p> <code>text_orientation</code> <p>Text orientation (<code>horizontal</code>|<code>vertical</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'horizontal'</code> </p> <code>line_color</code> <p>Line color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'black'</code> </p> <code>xmargin_ratio</code> <p>X margin ratio</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.01</code> </p> <code>align</code> <p>If True, annotate position is aligned to rightmost edge.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>text_kws</code> <p>Text properties https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>line_kws</code> <p>Axes.plot properties (e.g. dict(lw=2.0, ls=\"dashed\", ...)) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html</p> <p> TYPE: <code>dict[str, Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.marker","title":"marker","text":"<pre><code>marker(\n    query: str | list[str] | tuple[str],\n    marker: str = \"o\",\n    *,\n    size: int = 6,\n    descendent: bool = False,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Plot marker on target node(s)</p> PARAMETER  DESCRIPTION <code>query</code> <p>Search query node name(s) for plotting marker. If multiple node names are set, MRCA(Most Recent Common Ancester) node is set.</p> <p> TYPE: <code>str | list[str] | tuple[str]</code> </p> <code>marker</code> <p>Marker type (e.g. <code>o</code>, <code>s</code>, <code>D</code>, <code>P</code>, <code>*</code>, <code>x</code>, <code>d</code>, <code>^</code>, <code>v</code>, <code>&lt;</code>, <code>&gt;</code>) https://matplotlib.org/stable/api/markers_api.html</p> <p> TYPE: <code>str</code> DEFAULT: <code>'o'</code> </p> <code>size</code> <p>Marker size</p> <p> TYPE: <code>int</code> DEFAULT: <code>6</code> </p> <code>descendent</code> <p>If True, plot markers on target node's descendent as well.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>**kwargs</code> <p>Axes.scatter properties (e.g. <code>color=\"red\", ec=\"black\", alpha=0.5, ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.link","title":"link","text":"<pre><code>link(\n    query1: str | list[str] | tuple[str],\n    query2: str | list[str] | tuple[str],\n    *,\n    pos1: str = \"center\",\n    pos2: str = \"center\",\n    color: str = \"red\",\n    linestyle: str = \"dashed\",\n    arrowstyle: str = \"-|&gt;\",\n    connectionstyle: str = \"arc3,rad=0\",\n    **kwargs\n) -&gt; None\n</code></pre> <p>Plot link line between target nodes</p> PARAMETER  DESCRIPTION <code>query1</code> <p>Search query node name(s) for setting link start node. If multiple node names are set, MRCA(Most Recent Common Ancester) node is set.</p> <p> TYPE: <code>str | list[str] | tuple[str]</code> </p> <code>query2</code> <p>Search query node name(s) for setting link end node. If multiple node names are set, MRCA(Most Recent Common Ancester) node is set.</p> <p> TYPE: <code>str | list[str] | tuple[str]</code> </p> <code>pos1</code> <p>Link start node branch position1 (<code>left</code>|<code>center</code>|<code>right</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'center'</code> </p> <code>pos2</code> <p>Link end node branch position2 (<code>left</code>|<code>center</code>|<code>right</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'center'</code> </p> <code>color</code> <p>Link line color</p> <p> TYPE: <code>str</code> DEFAULT: <code>'red'</code> </p> <code>linestyle</code> <p>Line line style (e.g. <code>dotted</code>, <code>dashdot</code>, <code>solid</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'dashed'</code> </p> <code>arrowstyle</code> <p>Arrow style (e.g. <code>-</code>, <code>-&gt;</code>, <code>&lt;-&gt;</code>, <code>&lt;|-|&gt;</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.ArrowStyle.html</p> <p> TYPE: <code>str</code> DEFAULT: <code>'-|&gt;'</code> </p> <code>connectionstyle</code> <p>Connection style (e.g. <code>arc3,rad=0.2</code>, <code>arc3,rad=-0.5</code>) https://matplotlib.org/stable/gallery/userdemo/connectionstyle_demo.html</p> <p> TYPE: <code>str</code> DEFAULT: <code>'arc3,rad=0'</code> </p> <code>**kwargs</code> <p>PathPatch properties (e.g. <code>lw=0.5, alpha=0.5, zorder=0, ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.PathPatch.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.text_on_branch","title":"text_on_branch","text":"<pre><code>text_on_branch(\n    query: str | list[str] | tuple[str],\n    text: str,\n    *,\n    size: int = 8,\n    xpos: str = \"right\",\n    ypos: str = \"top\",\n    xmargin_ratio: float = 0.01,\n    ymargin_ratio: float = 0.05,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Plot text on branch of target node</p> PARAMETER  DESCRIPTION <code>query</code> <p>Search query node name(s) for plotting text. If multiple node names are set, MRCA(Most Recent Common Ancester) node is set.</p> <p> TYPE: <code>str | list[str] | tuple[str]</code> </p> <code>text</code> <p>Text content</p> <p> TYPE: <code>str</code> </p> <code>size</code> <p>Text size</p> <p> TYPE: <code>int</code> DEFAULT: <code>8</code> </p> <code>xpos</code> <p>X position of plot text (<code>left</code>|<code>center</code>|<code>right</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'right'</code> </p> <code>ypos</code> <p>Y position of plot text (<code>top</code>|<code>center</code>|<code>bottom</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'top'</code> </p> <code>xmargin_ratio</code> <p>Text x margin ratio. If <code>xpos = center</code>, this param is ignored.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.01</code> </p> <code>ymargin_ratio</code> <p>Text y margin ratio. If <code>ypos = center</code>, this param is ignored.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.05</code> </p> <code>**kwargs</code> <p>Text properties (e.g. <code>color=\"red\", bbox=dict(color=\"skyblue\"), ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.text_on_node","title":"text_on_node","text":"<pre><code>text_on_node(\n    query: str | list[str] | tuple[str], text: str, *, size: int = 8, **kwargs\n) -&gt; None\n</code></pre> <p>Plot text on target node</p> PARAMETER  DESCRIPTION <code>query</code> <p>Search query node name(s) for plotting text. If multiple node names are set, MRCA(Most Recent Common Ancester) node is set.</p> <p> TYPE: <code>str | list[str] | tuple[str]</code> </p> <code>text</code> <p>Text content</p> <p> TYPE: <code>str</code> </p> <code>size</code> <p>Text size</p> <p> TYPE: <code>int</code> DEFAULT: <code>8</code> </p> <code>**kwargs</code> <p>Text properties (e.g. <code>color=\"red\", bbox=dict(color=\"skyblue\"), ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.set_node_label_props","title":"set_node_label_props","text":"<pre><code>set_node_label_props(target_node_label: str, **kwargs) -&gt; None\n</code></pre> <p>Set tree node label properties</p> PARAMETER  DESCRIPTION <code>target_node_label</code> <p>Target node label name</p> <p> TYPE: <code>str</code> </p> <code>kwargs</code> <p>Text properties (e.g. <code>color=\"red\", ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.text.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.set_node_line_props","title":"set_node_line_props","text":"<pre><code>set_node_line_props(\n    query: str | list[str] | tuple[str], *, descendent: bool = True, **kwargs\n) -&gt; None\n</code></pre> <p>Set tree node line properties</p> PARAMETER  DESCRIPTION <code>query</code> <p>Search query node name(s) for coloring tree node line. If multiple node names are set, MRCA(Most Recent Common Ancester) node is set.</p> <p> TYPE: <code>str | list[str] | tuple[str]</code> </p> <code>descendent</code> <p>If True, set properties on target node's descendent as well.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>**kwargs</code> <p>Axes.plot properties (e.g. <code>color=\"blue\", lw=2.0, ls=\"dashed\", ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.set_title","title":"set_title","text":"<pre><code>set_title(label: str, **kwargs) -&gt; None\n</code></pre> <p>Set title</p> PARAMETER  DESCRIPTION <code>label</code> <p>Title text label</p> <p> TYPE: <code>str</code> </p> <code>**kwargs</code> <p>Axes.set_title properties (e.g. <code>size=12, color=\"red\", ...</code>) https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.set_title.html</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.update_plot_props","title":"update_plot_props","text":"<pre><code>update_plot_props(\n    *,\n    tree_line_kws: dict[str, Any] | None = None,\n    tree_align_line_kws: dict[str, Any] | None = None\n) -&gt; None\n</code></pre> <p>Update plot properties</p> PARAMETER  DESCRIPTION <code>tree_line_kws</code> <p>Axes.plot properties (e.g. <code>dict(color=\"red\", lw=0.5, ...)</code>) By default, <code>color=\"black\", lw=1, clip_on=False</code> are set. https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html</p> <p> TYPE: <code>dict[str, Any]</code> DEFAULT: <code>None</code> </p> <code>tree_align_line_kws</code> <p>Axes.plot properties (e.g. <code>dict(color=\"red\", ls=\"dashed\", ...)</code>) By default, <code>lw=0.5, ls=\"dashed\", alpha=0.5, clip_on=False</code> are set. https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html</p> <p> TYPE: <code>dict[str, Any]</code> DEFAULT: <code>None</code> </p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.plotfig","title":"plotfig","text":"<pre><code>plotfig(*, dpi=100, ax: Axes | None = None) -&gt; Figure\n</code></pre> <p>Plot figure</p> PARAMETER  DESCRIPTION <code>dpi</code> <p>Figure DPI</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> <code>ax</code> <p>Matplotlib axes for plotting. If None, figure &amp; axes are newly created.</p> <p> TYPE: <code>Axes | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>figure</code> <p>Matplotlib figure</p> <p> TYPE: <code>Figure</code> </p>"},{"location":"api-docs/treeviz/#phytreeviz.treeviz.TreeViz.savefig","title":"savefig","text":"<pre><code>savefig(savefile: str | Path, *, dpi: int = 100, pad_inches: float = 0.1) -&gt; None\n</code></pre> <p>Save figure to file</p> <p><code>tv.savefig(\"result.png\")</code> is alias for <code>tv.plotfig().savefig(\"result.png\")</code></p> PARAMETER  DESCRIPTION <code>savefile</code> <p>Save file (<code>*.png</code>|<code>*.jpg</code>|<code>*.svg</code>|<code>*.pdf</code>)</p> <p> TYPE: <code>str | Path</code> </p> <code>dpi</code> <p>DPI</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> <code>pad_inches</code> <p>Padding inches</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.1</code> </p>"},{"location":"cli-docs/phytreeviz/","title":"phyTreeViz CLI Document","text":""},{"location":"cli-docs/phytreeviz/#usage","title":"Usage","text":""},{"location":"cli-docs/phytreeviz/#basic-command","title":"Basic Command","text":"<pre><code>phytreeviz -i [Tree file or text] -o [Tree visualization file]\n</code></pre>"},{"location":"cli-docs/phytreeviz/#options","title":"Options","text":"<pre><code>General Options:\n  -i IN, --intree IN      Input phylogenetic tree file or text\n  -o OUT, --outfile OUT   Output phylogenetic tree plot file [*.png|*.jpg|*.svg|*.pdf]\n  --format                Input phylogenetic tree format (Default: 'newick')\n  -v, --version           Print version information\n  -h, --help              Show this help message and exit\n\nFigure Appearence Options:\n  --fig_height            Figure height per leaf node of tree (Default: 0.5)\n  --fig_width             Figure width (Default: 8.0)\n  --leaf_label_size       Leaf label size (Default: 12)\n  --ignore_branch_length  Ignore branch length for plotting tree (Default: OFF)\n  --align_leaf_label      Align leaf label position (Default: OFF)\n  --show_branch_length    Show branch length (Default: OFF)\n  --show_confidence       Show confidence (Default: OFF)\n  --dpi                   Figure DPI (Default: 300)\n\nAvailable Tree Format: ['newick', 'phyloxml', 'nexus', 'nexml', 'cdao']\n</code></pre>"},{"location":"cli-docs/phytreeviz/#example-command","title":"Example Command","text":"<p>Click here to download example tree files.  </p>"},{"location":"cli-docs/phytreeviz/#example-1","title":"Example 1","text":"<pre><code>phytreeviz -i \"((A,B),((C,D),(E,(F,G))));\" -o cli_example01.png\n</code></pre>"},{"location":"cli-docs/phytreeviz/#example-2","title":"Example 2","text":"<pre><code>phytreeviz -i ./example/small_example.nwk -o cli_example02.png \\\n           --show_branch_length --show_confidence\n</code></pre>"},{"location":"cli-docs/phytreeviz/#example-3","title":"Example 3","text":"<pre><code>phytreeviz -i ./example/medium_example.nwk -o cli_example03.png \\\n           --fig_height 0.3 --align_leaf_label\n</code></pre>"}]}